// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(TapyrusWalletFFI)
import TapyrusWalletFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_tapyrus_wallet_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_tapyrus_wallet_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureTapyrusWalletFfiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




/**
 * The tapyrus wallet configuration
 */
public protocol ConfigProtocol: AnyObject {
    
}
/**
 * The tapyrus wallet configuration
 */
open class Config: ConfigProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_tapyrus_wallet_ffi_fn_clone_config(self.pointer, $0) }
    }
    /**
     * Create a new Config instance
     * Arguments:
     * - network_mode: The tapyrus network mode the wallet is connected to.
     * - network_id: The network id of the tapyrus network the wallet is connected to.
     * - genesis_hash: The genesis block hash of the tapyrus network the wallet is connected to.
     * - esplora_url: The esplora URL to connect to.
     * - esplora_user: The esplora basic authentication user to connect to.
     * - esplora_password: The esplora basic authentication password to connect to.
     * - master_key_path: The master key path to load the wallet from.
     * - master_key: The master key base58 encode string.
     * - db_file_path: The wallet db file path to load the wallet from.
     */
public convenience init(networkMode: Network, networkId: UInt32, genesisHash: String, esploraUrl: String, esploraUser: String? = nil, esploraPassword: String? = nil, masterKeyPath: String? = nil, masterKey: String? = nil, dbFilePath: String? = nil) {
    let pointer =
        try! rustCall() {
    uniffi_tapyrus_wallet_ffi_fn_constructor_config_new(
        FfiConverterTypeNetwork_lower(networkMode),
        FfiConverterUInt32.lower(networkId),
        FfiConverterString.lower(genesisHash),
        FfiConverterString.lower(esploraUrl),
        FfiConverterOptionString.lower(esploraUser),
        FfiConverterOptionString.lower(esploraPassword),
        FfiConverterOptionString.lower(masterKeyPath),
        FfiConverterOptionString.lower(masterKey),
        FfiConverterOptionString.lower(dbFilePath),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_tapyrus_wallet_ffi_fn_free_config(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Config

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Config {
        return Config(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Config) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ pointer: UnsafeMutableRawPointer) throws -> Config {
    return try FfiConverterTypeConfig.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConfig.lower(value)
}






/**
 * The HDWallet
 */
public protocol HdWalletProtocol: AnyObject {
    
    /**
     * Get the balance of the wallet
     */
    func balance(colorId: String?) throws  -> UInt64
    
    /**
     * Get the pay to contract address
     */
    func calcP2cAddress(publicKey: String, contract: String, colorId: String?) throws  -> String
    
    /**
     * Check the trust layer refund transaction and return amount of the refund token
     * - txid: The transaction id to transfer token to email receiver wallet
     * - color_id: The color id of the token
     */
    func checkTrustLayerRefund(txid: String, colorId: String) throws  -> UInt64
    
    /**
     * Full sync the wallet with esplora
     * This method will sync the wallet from the genesis block
     */
    func fullSync() throws 
    
    /**
     * Get a new address
     */
    func getNewAddress(colorId: String?) throws  -> GetNewAddressResult
    
    /**
     * Get the transaction by the txid
     */
    func getTransaction(txid: String) throws  -> String
    
    /**
     * Get the transaction by the txid
     */
    func getTxOutByAddress(tx: String, address: String) throws  -> [TxOut]
    
    /**
     * Sign the message
     */
    func signMessage(publicKey: String, message: String) throws  -> String
    
    /**
     * Store the contract
     */
    func storeContract(contract: Contract) throws  -> Contract
    
    /**
     * Sync the wallet with the esplora
     */
    func sync() throws 
    
    /**
     * Transfer the amount to the address
     */
    func transfer(params: [TransferParams], utxos: [TxOut]) throws  -> String
    
    /**
     * Update the contract payable
     */
    func updateContract(contractId: String, payable: Bool) throws 
    
    /**
     * Verify the signature
     */
    func verifySign(publicKey: String, message: String, signature: String) throws  -> Bool
    
}
/**
 * The HDWallet
 */
open class HdWallet: HdWalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_tapyrus_wallet_ffi_fn_clone_hdwallet(self.pointer, $0) }
    }
    /**
     * Create a new HDWallet instance
     */
public convenience init(config: Config)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeNewError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_constructor_hdwallet_new(
        FfiConverterTypeConfig_lower(config),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_tapyrus_wallet_ffi_fn_free_hdwallet(pointer, $0) }
    }

    

    
    /**
     * Get the balance of the wallet
     */
open func balance(colorId: String?)throws  -> UInt64  {
    return try  FfiConverterUInt64.lift(try rustCallWithError(FfiConverterTypeBalanceError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_balance(self.uniffiClonePointer(),
        FfiConverterOptionString.lower(colorId),$0
    )
})
}
    
    /**
     * Get the pay to contract address
     */
open func calcP2cAddress(publicKey: String, contract: String, colorId: String?)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeCalcPayToContractAddressError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_calc_p2c_address(self.uniffiClonePointer(),
        FfiConverterString.lower(publicKey),
        FfiConverterString.lower(contract),
        FfiConverterOptionString.lower(colorId),$0
    )
})
}
    
    /**
     * Check the trust layer refund transaction and return amount of the refund token
     * - txid: The transaction id to transfer token to email receiver wallet
     * - color_id: The color id of the token
     */
open func checkTrustLayerRefund(txid: String, colorId: String)throws  -> UInt64  {
    return try  FfiConverterUInt64.lift(try rustCallWithError(FfiConverterTypeCheckTrustLayerRefundError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_check_trust_layer_refund(self.uniffiClonePointer(),
        FfiConverterString.lower(txid),
        FfiConverterString.lower(colorId),$0
    )
})
}
    
    /**
     * Full sync the wallet with esplora
     * This method will sync the wallet from the genesis block
     */
open func fullSync()throws   {try rustCallWithError(FfiConverterTypeSyncError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_full_sync(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Get a new address
     */
open func getNewAddress(colorId: String?)throws  -> GetNewAddressResult  {
    return try  FfiConverterTypeGetNewAddressResult_lift(try rustCallWithError(FfiConverterTypeGetNewAddressError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_new_address(self.uniffiClonePointer(),
        FfiConverterOptionString.lower(colorId),$0
    )
})
}
    
    /**
     * Get the transaction by the txid
     */
open func getTransaction(txid: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeGetTransactionError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_transaction(self.uniffiClonePointer(),
        FfiConverterString.lower(txid),$0
    )
})
}
    
    /**
     * Get the transaction by the txid
     */
open func getTxOutByAddress(tx: String, address: String)throws  -> [TxOut]  {
    return try  FfiConverterSequenceTypeTxOut.lift(try rustCallWithError(FfiConverterTypeGetTxOutByAddressError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_tx_out_by_address(self.uniffiClonePointer(),
        FfiConverterString.lower(tx),
        FfiConverterString.lower(address),$0
    )
})
}
    
    /**
     * Sign the message
     */
open func signMessage(publicKey: String, message: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeSignMessageError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sign_message(self.uniffiClonePointer(),
        FfiConverterString.lower(publicKey),
        FfiConverterString.lower(message),$0
    )
})
}
    
    /**
     * Store the contract
     */
open func storeContract(contract: Contract)throws  -> Contract  {
    return try  FfiConverterTypeContract_lift(try rustCallWithError(FfiConverterTypeStoreContractError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_store_contract(self.uniffiClonePointer(),
        FfiConverterTypeContract_lower(contract),$0
    )
})
}
    
    /**
     * Sync the wallet with the esplora
     */
open func sync()throws   {try rustCallWithError(FfiConverterTypeSyncError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sync(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Transfer the amount to the address
     */
open func transfer(params: [TransferParams], utxos: [TxOut])throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeTransferError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_transfer(self.uniffiClonePointer(),
        FfiConverterSequenceTypeTransferParams.lower(params),
        FfiConverterSequenceTypeTxOut.lower(utxos),$0
    )
})
}
    
    /**
     * Update the contract payable
     */
open func updateContract(contractId: String, payable: Bool)throws   {try rustCallWithError(FfiConverterTypeUpdateContractError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_update_contract(self.uniffiClonePointer(),
        FfiConverterString.lower(contractId),
        FfiConverterBool.lower(payable),$0
    )
}
}
    
    /**
     * Verify the signature
     */
open func verifySign(publicKey: String, message: String, signature: String)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeVerifySignError_lift) {
    uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_verify_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(publicKey),
        FfiConverterString.lower(message),
        FfiConverterString.lower(signature),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHdWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HdWallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HdWallet {
        return HdWallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HdWallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HdWallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HdWallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHdWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> HdWallet {
    return try FfiConverterTypeHdWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHdWallet_lower(_ value: HdWallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHdWallet.lower(value)
}




/**
 * The contract for the Pay to Contract Protocol
 */
public struct Contract {
    /**
     * The contract id of the contract
     * Wallet users can use this id to refer to the contract.
     */
    public var contractId: String
    /**
     * The commitment of the contract
     */
    public var contract: String
    /**
     * The public key the payment is sent to
     */
    public var paymentBase: String
    /**
     * Set to true to allow the wallet to use the transaction output for the payment
     */
    public var payable: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The contract id of the contract
         * Wallet users can use this id to refer to the contract.
         */contractId: String, 
        /**
         * The commitment of the contract
         */contract: String, 
        /**
         * The public key the payment is sent to
         */paymentBase: String, 
        /**
         * Set to true to allow the wallet to use the transaction output for the payment
         */payable: Bool) {
        self.contractId = contractId
        self.contract = contract
        self.paymentBase = paymentBase
        self.payable = payable
    }
}

#if compiler(>=6)
extension Contract: Sendable {}
#endif


extension Contract: Equatable, Hashable {
    public static func ==(lhs: Contract, rhs: Contract) -> Bool {
        if lhs.contractId != rhs.contractId {
            return false
        }
        if lhs.contract != rhs.contract {
            return false
        }
        if lhs.paymentBase != rhs.paymentBase {
            return false
        }
        if lhs.payable != rhs.payable {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contractId)
        hasher.combine(contract)
        hasher.combine(paymentBase)
        hasher.combine(payable)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContract: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contract {
        return
            try Contract(
                contractId: FfiConverterString.read(from: &buf), 
                contract: FfiConverterString.read(from: &buf), 
                paymentBase: FfiConverterString.read(from: &buf), 
                payable: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: Contract, into buf: inout [UInt8]) {
        FfiConverterString.write(value.contractId, into: &buf)
        FfiConverterString.write(value.contract, into: &buf)
        FfiConverterString.write(value.paymentBase, into: &buf)
        FfiConverterBool.write(value.payable, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContract_lift(_ buf: RustBuffer) throws -> Contract {
    return try FfiConverterTypeContract.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContract_lower(_ value: Contract) -> RustBuffer {
    return FfiConverterTypeContract.lower(value)
}


/**
 * The result of HDWallet#get_new_address
 */
public struct GetNewAddressResult {
    /**
     * The new address
     */
    public var address: String
    /**
     * The public key of the address
     */
    public var publicKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The new address
         */address: String, 
        /**
         * The public key of the address
         */publicKey: String) {
        self.address = address
        self.publicKey = publicKey
    }
}

#if compiler(>=6)
extension GetNewAddressResult: Sendable {}
#endif


extension GetNewAddressResult: Equatable, Hashable {
    public static func ==(lhs: GetNewAddressResult, rhs: GetNewAddressResult) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(publicKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetNewAddressResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetNewAddressResult {
        return
            try GetNewAddressResult(
                address: FfiConverterString.read(from: &buf), 
                publicKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: GetNewAddressResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.publicKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetNewAddressResult_lift(_ buf: RustBuffer) throws -> GetNewAddressResult {
    return try FfiConverterTypeGetNewAddressResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetNewAddressResult_lower(_ value: GetNewAddressResult) -> RustBuffer {
    return FfiConverterTypeGetNewAddressResult.lower(value)
}


/**
 * The transfer parameters
 */
public struct TransferParams {
    /**
     * The amount to transfer
     */
    public var amount: UInt64
    /**
     * P2PKH or CP2PKH address to transfer to
     */
    public var toAddress: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The amount to transfer
         */amount: UInt64, 
        /**
         * P2PKH or CP2PKH address to transfer to
         */toAddress: String) {
        self.amount = amount
        self.toAddress = toAddress
    }
}

#if compiler(>=6)
extension TransferParams: Sendable {}
#endif


extension TransferParams: Equatable, Hashable {
    public static func ==(lhs: TransferParams, rhs: TransferParams) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.toAddress != rhs.toAddress {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(toAddress)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransferParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransferParams {
        return
            try TransferParams(
                amount: FfiConverterUInt64.read(from: &buf), 
                toAddress: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TransferParams, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterString.write(value.toAddress, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferParams_lift(_ buf: RustBuffer) throws -> TransferParams {
    return try FfiConverterTypeTransferParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferParams_lower(_ value: TransferParams) -> RustBuffer {
    return FfiConverterTypeTransferParams.lower(value)
}


/**
 * The transaction output
 */
public struct TxOut {
    /**
     * The transaction id
     */
    public var txid: String
    /**
     * The index of the output
     */
    public var index: UInt32
    /**
     * The amount of the output
     */
    public var amount: UInt64
    /**
     * The color id of the output
     */
    public var colorId: String?
    /**
     * The address the output is locked to
     */
    public var address: String
    /**
     * True if the output is unspent
     */
    public var unspent: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The transaction id
         */txid: String, 
        /**
         * The index of the output
         */index: UInt32, 
        /**
         * The amount of the output
         */amount: UInt64, 
        /**
         * The color id of the output
         */colorId: String?, 
        /**
         * The address the output is locked to
         */address: String, 
        /**
         * True if the output is unspent
         */unspent: Bool) {
        self.txid = txid
        self.index = index
        self.amount = amount
        self.colorId = colorId
        self.address = address
        self.unspent = unspent
    }
}

#if compiler(>=6)
extension TxOut: Sendable {}
#endif


extension TxOut: Equatable, Hashable {
    public static func ==(lhs: TxOut, rhs: TxOut) -> Bool {
        if lhs.txid != rhs.txid {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.colorId != rhs.colorId {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.unspent != rhs.unspent {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txid)
        hasher.combine(index)
        hasher.combine(amount)
        hasher.combine(colorId)
        hasher.combine(address)
        hasher.combine(unspent)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxOut: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxOut {
        return
            try TxOut(
                txid: FfiConverterString.read(from: &buf), 
                index: FfiConverterUInt32.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                colorId: FfiConverterOptionString.read(from: &buf), 
                address: FfiConverterString.read(from: &buf), 
                unspent: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: TxOut, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txid, into: &buf)
        FfiConverterUInt32.write(value.index, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterOptionString.write(value.colorId, into: &buf)
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterBool.write(value.unspent, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxOut_lift(_ buf: RustBuffer) throws -> TxOut {
    return try FfiConverterTypeTxOut.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxOut_lower(_ value: TxOut) -> RustBuffer {
    return FfiConverterTypeTxOut.lower(value)
}


/**
 * The error for HDWallet#balance
 */
public enum BalanceError {

    
    
    /**
     * Occur if the color id is invalid
     */
    case InvalidColorId
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBalanceError: FfiConverterRustBuffer {
    typealias SwiftType = BalanceError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BalanceError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidColorId

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BalanceError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidColorId:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalanceError_lift(_ buf: RustBuffer) throws -> BalanceError {
    return try FfiConverterTypeBalanceError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalanceError_lower(_ value: BalanceError) -> RustBuffer {
    return FfiConverterTypeBalanceError.lower(value)
}


extension BalanceError: Equatable, Hashable {}



extension BalanceError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#calc_p2c_address
 */
public enum CalcPayToContractAddressError {

    
    
    /**
     * Occur if the public key is invalid
     */
    case FailedToParsePublicKey
    /**
     * Occur if the contract is wrong
     */
    case ContractError(causeDescription: String
    )
    /**
     * Occur if the color id is invalid
     */
    case InvalidColorId
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCalcPayToContractAddressError: FfiConverterRustBuffer {
    typealias SwiftType = CalcPayToContractAddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CalcPayToContractAddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParsePublicKey
        case 2: return .ContractError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InvalidColorId

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CalcPayToContractAddressError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FailedToParsePublicKey:
            writeInt(&buf, Int32(1))
        
        
        case let .ContractError(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .InvalidColorId:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCalcPayToContractAddressError_lift(_ buf: RustBuffer) throws -> CalcPayToContractAddressError {
    return try FfiConverterTypeCalcPayToContractAddressError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCalcPayToContractAddressError_lower(_ value: CalcPayToContractAddressError) -> RustBuffer {
    return FfiConverterTypeCalcPayToContractAddressError.lower(value)
}


extension CalcPayToContractAddressError: Equatable, Hashable {}



extension CalcPayToContractAddressError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#check_trust_layer_refund
 */
public enum CheckTrustLayerRefundError {

    
    
    /**
     * Occur if the txid is invalid
     */
    case FailedToParseTxid(txid: String
    )
    /**
     * Occur if the esplora client fails to connect
     */
    case EsploraClientError(causeDescription: String
    )
    /**
     * Occur if the transaction is not found in the esplora
     */
    case UnknownTxid
    /**
     * Occur if the refund transaction is not found in the esplora
     */
    case CannotFoundRefundTransaction(txid: String
    )
    /**
     * Occur if the color id is invalid
     */
    case InvalidColorId
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCheckTrustLayerRefundError: FfiConverterRustBuffer {
    typealias SwiftType = CheckTrustLayerRefundError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CheckTrustLayerRefundError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParseTxid(
            txid: try FfiConverterString.read(from: &buf)
            )
        case 2: return .EsploraClientError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 3: return .UnknownTxid
        case 4: return .CannotFoundRefundTransaction(
            txid: try FfiConverterString.read(from: &buf)
            )
        case 5: return .InvalidColorId

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CheckTrustLayerRefundError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .FailedToParseTxid(txid):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(txid, into: &buf)
            
        
        case let .EsploraClientError(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .UnknownTxid:
            writeInt(&buf, Int32(3))
        
        
        case let .CannotFoundRefundTransaction(txid):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(txid, into: &buf)
            
        
        case .InvalidColorId:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckTrustLayerRefundError_lift(_ buf: RustBuffer) throws -> CheckTrustLayerRefundError {
    return try FfiConverterTypeCheckTrustLayerRefundError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckTrustLayerRefundError_lower(_ value: CheckTrustLayerRefundError) -> RustBuffer {
    return FfiConverterTypeCheckTrustLayerRefundError.lower(value)
}


extension CheckTrustLayerRefundError: Equatable, Hashable {}



extension CheckTrustLayerRefundError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#get_new_address
 */
public enum GetNewAddressError {

    
    
    /**
     * Occur if the color id is invalid
     */
    case InvalidColorId
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetNewAddressError: FfiConverterRustBuffer {
    typealias SwiftType = GetNewAddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetNewAddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidColorId

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GetNewAddressError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidColorId:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetNewAddressError_lift(_ buf: RustBuffer) throws -> GetNewAddressError {
    return try FfiConverterTypeGetNewAddressError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetNewAddressError_lower(_ value: GetNewAddressError) -> RustBuffer {
    return FfiConverterTypeGetNewAddressError.lower(value)
}


extension GetNewAddressError: Equatable, Hashable {}



extension GetNewAddressError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#get_transaction
 */
public enum GetTransactionError {

    
    
    /**
     * Occur if the txid is invalid
     */
    case FailedToParseTxid(txid: String
    )
    /**
     * Occur if the esplora client fails to connect
     */
    case EsploraClientError(causeDescription: String
    )
    /**
     * Occur if the transaction is not found in the esplora
     */
    case UnknownTxid
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetTransactionError: FfiConverterRustBuffer {
    typealias SwiftType = GetTransactionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetTransactionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParseTxid(
            txid: try FfiConverterString.read(from: &buf)
            )
        case 2: return .EsploraClientError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 3: return .UnknownTxid

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GetTransactionError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .FailedToParseTxid(txid):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(txid, into: &buf)
            
        
        case let .EsploraClientError(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .UnknownTxid:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTransactionError_lift(_ buf: RustBuffer) throws -> GetTransactionError {
    return try FfiConverterTypeGetTransactionError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTransactionError_lower(_ value: GetTransactionError) -> RustBuffer {
    return FfiConverterTypeGetTransactionError.lower(value)
}


extension GetTransactionError: Equatable, Hashable {}



extension GetTransactionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#get_tx_out_by_address
 */
public enum GetTxOutByAddressError {

    
    
    /**
     * Occur if the transaction hex is invalid
     */
    case FailedToParseTxHex
    /**
     * Occur if the address is invalid
     */
    case FailedToParseAddress(address: String
    )
    /**
     * Occur if the esplora client fails to connect
     */
    case EsploraClientError(causeDescription: String
    )
    /**
     * Occur if the transaction is not found in the esplora
     */
    case UnknownTransaction
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetTxOutByAddressError: FfiConverterRustBuffer {
    typealias SwiftType = GetTxOutByAddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetTxOutByAddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParseTxHex
        case 2: return .FailedToParseAddress(
            address: try FfiConverterString.read(from: &buf)
            )
        case 3: return .EsploraClientError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 4: return .UnknownTransaction

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GetTxOutByAddressError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FailedToParseTxHex:
            writeInt(&buf, Int32(1))
        
        
        case let .FailedToParseAddress(address):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(address, into: &buf)
            
        
        case let .EsploraClientError(causeDescription):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .UnknownTransaction:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTxOutByAddressError_lift(_ buf: RustBuffer) throws -> GetTxOutByAddressError {
    return try FfiConverterTypeGetTxOutByAddressError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTxOutByAddressError_lower(_ value: GetTxOutByAddressError) -> RustBuffer {
    return FfiConverterTypeGetTxOutByAddressError.lower(value)
}


extension GetTxOutByAddressError: Equatable, Hashable {}



extension GetTxOutByAddressError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The tapyrus network mode
 */

public enum Network {
    
    /**
     * The tapyrus network mode for Production
     */
    case prod
    /**
     * The tapyrus network mode for Development
     */
    case dev
}


#if compiler(>=6)
extension Network: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .prod
        
        case 2: return .dev
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .prod:
            writeInt(&buf, Int32(1))
        
        
        case .dev:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}


extension Network: Equatable, Hashable {}




/**
 * The error for HDWallet constructor
 */
public enum NewError {

    
    
    /**
     * Occur if the master key file is wrong or not found
     */
    case LoadMasterKeyError(causeDescription: String
    )
    /**
     * Occur if the wallet db file is wrong or not found
     */
    case LoadWalletDbError(causeDescription: String
    )
    /**
     * Occur if the genesis hash is wrong
     */
    case ParseGenesisHashError
    /**
     * Occur if the genesis hash does not match the wallet db
     */
    case LoadedGenesisDoesNotMatch(expected: String, got: String?
    )
    /**
     * Occur if the network id does not match the wallet db
     */
    case LoadedNetworkDoesNotMatch(expected: Network, got: Network?
    )
    /**
     * Occur if the wallet db is not initialized
     */
    case NotInitialized
    /**
     * Occur if the master key is not match with persisted.
     */
    case MasterKeyDoesNotMatch(got: String?, keychain: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNewError: FfiConverterRustBuffer {
    typealias SwiftType = NewError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NewError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .LoadMasterKeyError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 2: return .LoadWalletDbError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 3: return .ParseGenesisHashError
        case 4: return .LoadedGenesisDoesNotMatch(
            expected: try FfiConverterString.read(from: &buf), 
            got: try FfiConverterOptionString.read(from: &buf)
            )
        case 5: return .LoadedNetworkDoesNotMatch(
            expected: try FfiConverterTypeNetwork.read(from: &buf), 
            got: try FfiConverterOptionTypeNetwork.read(from: &buf)
            )
        case 6: return .NotInitialized
        case 7: return .MasterKeyDoesNotMatch(
            got: try FfiConverterOptionString.read(from: &buf), 
            keychain: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NewError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .LoadMasterKeyError(causeDescription):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case let .LoadWalletDbError(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .ParseGenesisHashError:
            writeInt(&buf, Int32(3))
        
        
        case let .LoadedGenesisDoesNotMatch(expected,got):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(expected, into: &buf)
            FfiConverterOptionString.write(got, into: &buf)
            
        
        case let .LoadedNetworkDoesNotMatch(expected,got):
            writeInt(&buf, Int32(5))
            FfiConverterTypeNetwork.write(expected, into: &buf)
            FfiConverterOptionTypeNetwork.write(got, into: &buf)
            
        
        case .NotInitialized:
            writeInt(&buf, Int32(6))
        
        
        case let .MasterKeyDoesNotMatch(got,keychain):
            writeInt(&buf, Int32(7))
            FfiConverterOptionString.write(got, into: &buf)
            FfiConverterString.write(keychain, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNewError_lift(_ buf: RustBuffer) throws -> NewError {
    return try FfiConverterTypeNewError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNewError_lower(_ value: NewError) -> RustBuffer {
    return FfiConverterTypeNewError.lower(value)
}


extension NewError: Equatable, Hashable {}



extension NewError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#sign_message
 */
public enum SignMessageError {

    
    
    /**
     * Occur if the public key is invalid
     */
    case FailedToParsePublicKey
    /**
     * Occur if the public key is not found in the wallet
     */
    case PublicKeyNotFoundInWallet
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignMessageError: FfiConverterRustBuffer {
    typealias SwiftType = SignMessageError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignMessageError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParsePublicKey
        case 2: return .PublicKeyNotFoundInWallet

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignMessageError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FailedToParsePublicKey:
            writeInt(&buf, Int32(1))
        
        
        case .PublicKeyNotFoundInWallet:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageError_lift(_ buf: RustBuffer) throws -> SignMessageError {
    return try FfiConverterTypeSignMessageError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageError_lower(_ value: SignMessageError) -> RustBuffer {
    return FfiConverterTypeSignMessageError.lower(value)
}


extension SignMessageError: Equatable, Hashable {}



extension SignMessageError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#store_contract
 */
public enum StoreContractError {

    
    
    /**
     * Occur if the contract is wrong
     */
    case ContractError(causeDescription: String
    )
    /**
     * Occur if the public key is invalid
     */
    case FailedToParsePublicKey
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStoreContractError: FfiConverterRustBuffer {
    typealias SwiftType = StoreContractError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StoreContractError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ContractError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 2: return .FailedToParsePublicKey

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StoreContractError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ContractError(causeDescription):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case .FailedToParsePublicKey:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStoreContractError_lift(_ buf: RustBuffer) throws -> StoreContractError {
    return try FfiConverterTypeStoreContractError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStoreContractError_lower(_ value: StoreContractError) -> RustBuffer {
    return FfiConverterTypeStoreContractError.lower(value)
}


extension StoreContractError: Equatable, Hashable {}



extension StoreContractError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#sync
 */
public enum SyncError {

    
    
    /**
     * Occur if the esplora client fails to connect
     */
    case EsploraClientError(causeDescription: String
    )
    /**
     * Occur if the wallet fails to update the wallet db
     */
    case UpdateWalletError(causeDescription: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSyncError: FfiConverterRustBuffer {
    typealias SwiftType = SyncError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .EsploraClientError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 2: return .UpdateWalletError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SyncError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .EsploraClientError(causeDescription):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case let .UpdateWalletError(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSyncError_lift(_ buf: RustBuffer) throws -> SyncError {
    return try FfiConverterTypeSyncError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSyncError_lower(_ value: SyncError) -> RustBuffer {
    return FfiConverterTypeSyncError.lower(value)
}


extension SyncError: Equatable, Hashable {}



extension SyncError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#transfer
 */
public enum TransferError {

    
    
    /**
     * Occur if the wallet does not have enough funds to transfer
     */
    case InsufficientFund
    /**
     * Occur if the esplora client fails to connect
     */
    case EsploraClient(causeDescription: String
    )
    /**
     * Occur if the address is invalid
     */
    case FailedToParseAddress(address: String
    )
    /**
     * Occur if the network mode of the address is not matched
     */
    case WrongNetworkAddress(address: String
    )
    /**
     * Occur if the txid in the TxOut is invalid
     */
    case FailedToParseTxid(txid: String
    )
    /**
     * Occur if the amount to transfer is invalid
     */
    case InvalidTransferAmount(causeDescription: String
    )
    /**
     * Occur if the UTXO which means TxOut is not in the wallet db because_description the wallet is not synced or any other reasons
     */
    case UnknownUtxo(utxo: TxOut
    )
    /**
     * Occur if the wallet fails to create a transaction
     */
    case FailedToCreateTransaction(causeDescription: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransferError: FfiConverterRustBuffer {
    typealias SwiftType = TransferError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransferError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InsufficientFund
        case 2: return .EsploraClient(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 3: return .FailedToParseAddress(
            address: try FfiConverterString.read(from: &buf)
            )
        case 4: return .WrongNetworkAddress(
            address: try FfiConverterString.read(from: &buf)
            )
        case 5: return .FailedToParseTxid(
            txid: try FfiConverterString.read(from: &buf)
            )
        case 6: return .InvalidTransferAmount(
            causeDescription: try FfiConverterString.read(from: &buf)
            )
        case 7: return .UnknownUtxo(
            utxo: try FfiConverterTypeTxOut.read(from: &buf)
            )
        case 8: return .FailedToCreateTransaction(
            causeDescription: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransferError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InsufficientFund:
            writeInt(&buf, Int32(1))
        
        
        case let .EsploraClient(causeDescription):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case let .FailedToParseAddress(address):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(address, into: &buf)
            
        
        case let .WrongNetworkAddress(address):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(address, into: &buf)
            
        
        case let .FailedToParseTxid(txid):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(txid, into: &buf)
            
        
        case let .InvalidTransferAmount(causeDescription):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(causeDescription, into: &buf)
            
        
        case let .UnknownUtxo(utxo):
            writeInt(&buf, Int32(7))
            FfiConverterTypeTxOut.write(utxo, into: &buf)
            
        
        case let .FailedToCreateTransaction(causeDescription):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(causeDescription, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferError_lift(_ buf: RustBuffer) throws -> TransferError {
    return try FfiConverterTypeTransferError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransferError_lower(_ value: TransferError) -> RustBuffer {
    return FfiConverterTypeTransferError.lower(value)
}


extension TransferError: Equatable, Hashable {}



extension TransferError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#update_contract
 */
public enum UpdateContractError {

    
    
    /**
     * Occur if the contract is wrong
     */
    case ContractError(causeDescription: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUpdateContractError: FfiConverterRustBuffer {
    typealias SwiftType = UpdateContractError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UpdateContractError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ContractError(
            causeDescription: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UpdateContractError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ContractError(causeDescription):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(causeDescription, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateContractError_lift(_ buf: RustBuffer) throws -> UpdateContractError {
    return try FfiConverterTypeUpdateContractError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateContractError_lower(_ value: UpdateContractError) -> RustBuffer {
    return FfiConverterTypeUpdateContractError.lower(value)
}


extension UpdateContractError: Equatable, Hashable {}



extension UpdateContractError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



/**
 * The error for HDWallet#verify_sign
 */
public enum VerifySignError {

    
    
    /**
     * Occur if the public key is invalid
     */
    case FailedToParsePublicKey
    /**
     * Occur if the signature format is invalid
     */
    case FailedToParseSignature
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerifySignError: FfiConverterRustBuffer {
    typealias SwiftType = VerifySignError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerifySignError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToParsePublicKey
        case 2: return .FailedToParseSignature

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VerifySignError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FailedToParsePublicKey:
            writeInt(&buf, Int32(1))
        
        
        case .FailedToParseSignature:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifySignError_lift(_ buf: RustBuffer) throws -> VerifySignError {
    return try FfiConverterTypeVerifySignError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifySignError_lower(_ value: VerifySignError) -> RustBuffer {
    return FfiConverterTypeVerifySignError.lower(value)
}


extension VerifySignError: Equatable, Hashable {}



extension VerifySignError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNetwork.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNetwork.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTransferParams: FfiConverterRustBuffer {
    typealias SwiftType = [TransferParams]

    public static func write(_ value: [TransferParams], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransferParams.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TransferParams] {
        let len: Int32 = try readInt(&buf)
        var seq = [TransferParams]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTransferParams.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTxOut: FfiConverterRustBuffer {
    typealias SwiftType = [TxOut]

    public static func write(_ value: [TxOut], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTxOut.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TxOut] {
        let len: Int32 = try readInt(&buf)
        var seq = [TxOut]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTxOut.read(from: &buf))
        }
        return seq
    }
}
/**
 * Generate Master Key
 */
public func generateMasterKey(networkMode: Network) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_tapyrus_wallet_ffi_fn_func_generate_master_key(
        FfiConverterTypeNetwork_lower(networkMode),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_tapyrus_wallet_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_func_generate_master_key() != 28023) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance() != 45107) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address() != 1430) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_check_trust_layer_refund() != 10245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_full_sync() != 9565) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address() != 57092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction() != 41521) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address() != 63947) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sign_message() != 45881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract() != 30217) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sync() != 29642) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer() != 55148) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract() != 18064) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_verify_sign() != 5050) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_constructor_config_new() != 46068) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new() != 32676) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureTapyrusWalletFfiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all